如何调用一个智能合约
1. 通过向合约地址转账，可以触发合约的 receive() 或 fallback() 函数。
2. 通过调用合约的公开函数（如 transfer、bid 等），需要通过钱包或其他合约发起交易。
3. 合约之间的调用（合约A调用合约B）通常由外部账户发起交易，合约A再在内部调用合约B的函数。
4. 代理调用 delegatecall()：允许一个合约在另一个合约的上下文中执行代码，常用于合约升级和代理模式。

所有要接受外部转账的函数必须标注 payable，否则无法接收以太币。

fallback() 匿名函数
fallback() 是合约的兜底函数：
- 当调用不存在的函数或直接发送数据到合约时会触发。
- 如果希望能接收以太币，必须加 payable。
- 新版 Solidity 推荐同时实现 receive()（专门接收纯转账）和 fallback()（接收未知调用）。

创建智能合约流程：
1. 编写 Solidity 代码。
2. 使用编译器（如 solc、Remix、Truffle）编译成字节码和 ABI。
3. 通过钱包或脚本将字节码部署到区块链上，生成唯一合约地址。
4. 向0x0地址发送特殊交易时会创建新合约。

assert（条件）：如果条件不满足就抛出异常，常用于内部错误检查（如不变量）。
require（条件）：如果条件不满足就抛出异常，常用于外部输入、权限等检查。
两者都会消耗掉剩余 gas 并回滚状态。

receipt 数据结构
receipt（交易回执）是区块链上每笔交易执行后的结果记录，包含：
- 交易哈希（transactionHash）
- 区块号（blockNumber）
- gas 消耗（gasUsed）
- 合约地址（contractAddress，若为合约创建交易）
- 日志（logs，事件 Event 触发的内容）
- 状态（status，是否成功）
开发者可通过 receipt 查询交易执行情况、事件日志等。