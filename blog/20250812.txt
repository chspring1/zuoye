1.MetaMask钱包
2.solidity智能合约可以向钱包发送以太币
3.以太坊外部账户为钱包，有转账功能，没有代码，内部账户为智能合约，有转账功能，内部账户可以执行代码。
4.比特币账户存储余额是UTXO,以太坊是账户余额，每个账户都有一个balance字段。
5.比特币是纯钱包功能，以太坊在此基础上增加了智能合约功能。
6.合约可以向其他合约发送“消息”（Message）来调用其他合约

1. MetaMask钱包
MetaMask 是一个以太坊钱包插件，支持管理账户、发送和接收以太币、与 DApp 交互。它可以作为浏览器插件或移动端应用使用，常用于 Web3 应用的身份认证和交易签名。

2. Solidity 智能合约可以向钱包发送以太币
Solidity 合约中可以通过 transfer、send 或 call 向外部账户（钱包）发送以太币。例如：
```solidity
address payable to = payable(0x123...);
to.transfer(1 ether);
```

3. 以太坊账户类型
以太坊有两类账户：
- 外部账户（EOA）：由私钥控制，用户钱包属于此类。只能发起交易，不能主动执行代码。
- 合约账户（Contract Account）：由智能合约代码控制，不能主动发起交易，只能被动响应外部账户或其他合约的调用。

4. 比特币账户存储余额是 UTXO，以太坊是账户余额，每个账户都有一个 balance 字段。
比特币采用 UTXO（未花费交易输出）模型，每笔交易消耗之前的输出并产生新的输出，类似现金找零。
以太坊采用账户余额模型，每个账户有一个全局余额，转账时直接修改余额字段，便于实现智能合约和复杂逻辑。

5. 比特币是纯钱包功能，以太坊在此基础上增加了智能合约功能。
比特币只能实现点对点转账，功能单一。
以太坊除了转账，还能部署和执行智能合约，实现自动化业务逻辑、DApp、NFT、DeFi 等丰富应用。

6. 合约可以向其他合约发送“消息”（Message）来调用其他合约
以太坊智能合约之间可以通过“消息调用”相互通信。一个合约可以调用另一个合约的函数，这种调用称为“消息调用”（Message Call）。
常见方式有：
- 直接调用：合约A内部通过B合约的接口调用B的函数。
- 使用 call、delegatecall、staticcall 等低级函数实现更灵活的调用。

示例：
```solidity
// 合约B
contract B {
	function getNumber() public pure returns (uint) {
		return 42;
	}
}

// 合约A 调用合约B
contract A {
	function callB(address bAddr) public view returns (uint) {
		B b = B(bAddr);
		return b.getNumber();
	}
}
```
这种机制让以太坊上的合约可以像“乐高积木”一样自由组合，构建复杂的去中心化应用。